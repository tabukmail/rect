import java.util.ArrayList;
import java.util.Collections;



class Main {
  public static void main(String[] args) {
  long startTime = System.nanoTime();
    
      long stVal = 12;
      long sqVal = stVal*stVal; 
      long binV = sqVal-1;          
      ArrayList<Long> arrVal = new  ArrayList<>();


     
   
    
    while(binV > 0){
     
      double stepResult = Math.sqrt(binV);
         if(stepResult % 1 == 0){
            
             binV = sqVal - ((long)stepResult*(long)stepResult);
             sqVal = binV;  
             arrVal.add((long)stepResult);
         }else{
             binV =   binV - 1 ;
           }
    }
    
    /////---------------------------------------------------------------------
    ArrayList<Boolean> lag = new ArrayList<>();
    int size = arrVal.size();
      for(int i = 0; i < size-1; i++) {
         //System.out.println(arrVal.get(i) + ".." + arrVal.get(i+1) );
       if((arrVal.get(i)-arrVal.get(i+1)) > 0){
            lag.add(true);   
       }else{
            lag.add(false);
        }
      }
    
    /////---------------------------------------------------------------------  
    if(lag.contains(false)){
          long originVal =  arrVal.get(0); 
          //int countL = 0;//******
          long sumBin = 0;
          int countBin = 0;
          int stepUp = 1;
          
          ArrayList<Long> calArr = new ArrayList<>(); 
          ArrayList<Long> restArr = new ArrayList<>(); 
          for(long i = originVal; i > 0; i--){
               calArr.add(i);
               restArr.add(i);
             }
       
       ArrayList<Long> arrBin = new ArrayList<>(2);   
     
       //System.out.println(calArr);
       //System.out.println(restArr);
       //System.out.println(restArr.indexOf(25L));
          
      
        ArrayList<Boolean> lag2 = new ArrayList<>();
        
         
          while (sumBin != stVal*stVal ) {

               if(countBin > (calArr.size()-1)){ 
                         countBin = stepUp;     
                         stepUp = stepUp + 1;
                         sumBin = 0;
                         arrBin.clear();
                          }
               if(stepUp > (calArr.size())){ 
                         arrBin.clear();
                         
                         //System.out.println(arrBin);
                         break;                         
                          }
               long sqValue = calArr.get(countBin)*calArr.get(countBin);
               //System.out.println(" <<<- " + sqValue + " ->>>");
           
              
                    
                    if(sumBin < stVal*stVal && countBin < (calArr.size()) ){
                         
                           countBin = countBin +1;
                           sumBin = sumBin + sqValue;
                           if (sumBin <= stVal*stVal){
                             arrBin.add(sqValue);
                              }
                           if(countBin == (calArr.size()) && sumBin < stVal*stVal && arrBin.size()>1 && calArr.size() > 1 ) {

                                long startRange = calArr.indexOf((long)Math.sqrt(arrBin.get(0)));    
                                long endRange = calArr.indexOf((long)Math.sqrt(arrBin.get(1)));                                

                               // System.out.print("decompose::time to remove range>");
                               // System.out.print(" > " + (startRange+1));
                                //System.out.println(" to > " + endRange);
                                                                
                                calArr.subList((int)startRange+1, (int)endRange+1).clear();  //
                                
                                int size2 = calArr.size(); 
                                for(int i = 1; i < size2-1; i++) {
                                     if((calArr.get(i)-calArr.get(i+1)) > 1){
                                          lag2.add(true);   
                                     }else{
                                          lag2.add(false);
                                      }
                                    }
                                   
                                //System.out.println(" ***** " + calArr + "***" + lag2);
                               
                                stepUp = stepUp - 1;
                                }  
                           if(calArr.size() == 1 && lag.contains(true)){
                                sumBin = 0;
                                arrBin.clear();
                                calArr = restArr;
                                countBin = countBin + 1;     
                                stepUp = stepUp + 2;
                                //System.out.print(" ** no result ** " + calArr);
                                }   
                           
                      // +++++++++++++//
                                             
                      }else if(sumBin > stVal*stVal && countBin <= calArr.size()-1){
                         
                         sumBin = sumBin - calArr.get(countBin-1)*calArr.get(countBin-1);
                         arrBin.remove(calArr.get(countBin-1)*calArr.get(countBin-1)); 
                   
                    //----------------
                      
                      }else if(countBin == (calArr.size()-1) && stepUp <= countBin){
                         countBin = stepUp;     
                         stepUp = stepUp + 1;
                         sumBin = 0;
                         arrBin.clear();
                       
                      //-----------------
                      }else if(stepUp > countBin-1){
                         arrBin.clear();
                         System.out.println(".........");
                       System.out.println(".........");
                         break;                                                                     
                      }

            
        
                                                                               
                  

                                    //-------------
                      // System.out.println(" ++++" + (countBin-1) + "++++" + sumBin + "++++" + (calArr.size()-1)  + "++++step" + stepUp);
                            //-------------              
               
           //System.out.println(sumBin + "." + stVal*stVal + ".count-" + countBin + ".maxval-"+ originVal + ".step-" + stepUp);  
            
                
             
            
                
                //System.out.println(calArr);  
            
              }
      ArrayList<Long> arrFinal = new  ArrayList<>();
       for(long i : arrBin){
            arrFinal.add((long)Math.sqrt(i));
       } 

      if(arrFinal.size()>6){
       Collections.reverse(arrFinal);     
       String str2= "";
       for (Long val : arrFinal) {
			 str2 = str2 + Long.toString(val) + " ";
		     }
        System.out.println(str2);
       }else{
        System.out.println("null");
       }
      
      //System.out.println(lag);


      
    }else if(stVal == 0){
              System.out.println("null");
      
    }else {
      Collections.reverse(arrVal);
      String str1 = "";
      for (Long val : arrVal) {
			str1 = str1 + Long.toString(val) + " ";
		}
      str1 = str1.substring(0, str1.length() - 1);
     System.out.println("\"" + str1 + "\"");
    }
 /////////////////==================////////////////////   
    long endTime = System.nanoTime();
    long timeElapsed = endTime - startTime;
    System.out.println("Execution time in miliseconds: " + timeElapsed / 1000000);
   }
  }

