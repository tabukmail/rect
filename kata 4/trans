
import java.util.ArrayList;


class Main {

   //-----------------------------------------------------------//
 static  ArrayList<Long> arrOpt = new ArrayList<>();
 public static ArrayList<Long> checkOpt(Long b, int c) {
	 
	 long val = (long) Math.sqrt((b*b-((b-c)*(b-c))));
	 arrOpt.add(b-c);
	 for(long i = b*b-((b-c)*(b-c)); i > 0; i--) {
		 if(i <= val) {
			 arrOpt.add((long) i);
		 }
       }
	  return arrOpt;
     }
 //-------------------	-----------------------------------// 

  
  public static void main(String[] args) {
  long startTime = System.nanoTime();
    
      long stVal = 12;
      long sqVal = stVal*stVal; 
      long startSquareVal = sqVal;
      long binV = sqVal-1;          
      ArrayList<Long> arrVal = new  ArrayList<>();
    
    while(binV > 0){
 
      double stepResult = Math.sqrt(binV);
         if(stepResult % 1 == 0){
            
             binV = sqVal - ((long)stepResult*(long)stepResult);
             sqVal = binV;  
             arrVal.add((long)stepResult);
         }else{
             binV =   binV - 1 ;
           }
    }
   
    /////---------------------------------------------------------------------
    ArrayList<Boolean> lag = new ArrayList<>();
    int size = arrVal.size();
      for(int i = 0; i < size-1; i++) {
        
       if((arrVal.get(i)-arrVal.get(i+1)) > 0){
            lag.add(true);   
       }else{
            lag.add(false);
        }
      }

    /////---------------------------------------------------------------------  
    ////---------------------------------------------------------------------  
    ////---------------------------------------------------------------------  
    if(lag.contains(false)){
          long originVal =  arrVal.get(0); 
          long sumBin = 0;
          int countBin = 0;
          int stepUp = 1;
          int opt = 1;
          
          ArrayList<Long> calArr = new ArrayList<>(); 
          ArrayList<Long> restArr = new ArrayList<>(); 
          for(long i = originVal; i > 0; i--){
               calArr.add(i);
               restArr.add(i);
             }
       
       ArrayList<Long> arrBin = new ArrayList<>(2);   
       System.out.println(calArr);
       System.out.println(restArr);
              
        int control = 0;
          
          while (sumBin != startSquareVal ) {


                                           if(stepUp == (calArr.size())){
                                                             
                                                             control = 1; 
                                                             opt = opt + 1;
                                             System.out.println("...xxxxxx...." + control);
                                             System.out.println("...xxxxxx...." + opt);
                                                            
                                            }
                                          
                                         if(countBin > (calArr.size()-1)){ 
                                                   countBin = stepUp;     
                                                   stepUp = stepUp + 1;
                                                   sumBin = 0;
                                                   arrBin.clear();
                                                    }
                                         if(control == 1){ 
                                                   arrBin.clear();
                                                   countBin = 0;
                                                   stepUp = 1;
                                                   restArr.remove(0);
                                                   calArr = (ArrayList<Long>)restArr.clone();
                                                   control = 0;  
                                                   System.out.println(".....**...." + calArr);
                                                   System.out.println(".....**...." + countBin);
                                                   System.out.println(".....**...." + stepUp);
                                                   System.out.println(".....**...." + restArr);
                                                   System.out.println("....xxx...." + control);
                                                   checkOpt(stVal, opt);
                                                   System.out.println("x-x-x" + arrOpt);
                                                   arrOpt.clear();
                                                  
                                                                           
                                                    }
              long sqValue = calArr.get(countBin)*calArr.get(countBin);
                      System.out.println(" <<<-sqV " + sqValue + " ->>>");         
                                      ///***********

               if(sumBin < startSquareVal && countBin < (calArr.size()) ){

                           countBin = countBin +1;
                           sumBin = sumBin + sqValue;
                           if (sumBin <= startSquareVal){
                             arrBin.add(sqValue);
                              }
                     ///  
                           if(countBin == (calArr.size()) && sumBin < startSquareVal && arrBin.size()>1 && calArr.size() > 1) {

                                long startRange = calArr.indexOf((long)Math.sqrt(arrBin.get(0)));    
                                long endRange = calArr.indexOf((long)Math.sqrt(arrBin.get(1)));                                
                                System.out.print("decompose::time to remove range>");
                                System.out.print(" > " + (startRange+1));
                                System.out.println(" to > " + endRange);
                                                                
                                calArr.subList((int)startRange+1, (int)endRange+1).clear();  //
                               // System.out.print(" =*= " + calArr + " =*= " + restArr);
                               
                                stepUp = stepUp - 1;

                                }  
                // } else if(stepUp == (calArr.size())){
                //              System.out.println(".....sos...." );
                                                 
                      // +++++++++++++//
                     // +++++++++++++//    
                       
                         
              }else if(sumBin > startSquareVal && countBin <= calArr.size()-1){
                         
                         sumBin = sumBin - calArr.get(countBin-1)*calArr.get(countBin-1);
                  

                    //----------------
                      
            //  }else if(countBin == (calArr.size()-1) && stepUp <= countBin){
            //             countBin = stepUp;     
            //             stepUp = stepUp + 1;
            //             sumBin = 0;
            //             arrBin.clear();
                       
                      //-----------------
             //  }else if(stepUp > countBin-1){
             //            arrBin.clear();
             //            System.out.println(".........");
             //          System.out.println(".........");
             //            break;                                                                     
                }

                              //-------------
                       System.out.println(" ++++cb" + (countBin-1) + "++++sb" + sumBin + "++++carr" + (calArr.size()-1)  + "++++step" + stepUp + "++++cntr" + control);
                            //-------------              

                System.out.println(arrBin); 

              }

      
    }else{
      System.out.println(arrVal);
    }
 /////////////////==================////////////////////   
    long endTime = System.nanoTime();
    long timeElapsed = endTime - startTime;
    System.out.println("Execution time in miliseconds: " + timeElapsed / 1000000);
   }
  }

